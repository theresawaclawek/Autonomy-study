<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Story Assignment Spinner</title>
  <style>
    body { display: flex; flex-direction: column; align-items: center; font-family: Arial, sans-serif; margin-top: 50px; }
    #spinnerContainer { position: relative; width: 300px; height: 300px; }
    #spinner { width: 100%; height: 100%; transition: transform 5s ease-out; }
    #pointer { position: absolute; top: -20px; left: 50%; transform: translateX(-50%); font-size: 24px; }
    #spinButton { margin-top: 20px; padding: 10px 20px; font-size: 16px; cursor: pointer; }
  </style>
</head>
<body>
  <div id="spinnerContainer">
    <canvas id="spinner" width="300" height="300"></canvas>
    <div id="pointer">â–¼</div>
  </div>
  <button id="spinButton">Spin</button>

  <script>
    // Story options and colors
    const stories = ["Romance","Historical Fiction","Science Fiction","Detective Fiction","Action"];
    const colors = ["red","blue","yellow","green","purple"];
    const forcedStory = null; // set to a story name to force assignment

    const canvas = document.getElementById('spinner');
    const ctx = canvas.getContext('2d');
    const size = canvas.width;
    const center = size / 2;
    const segmentAngle = (2 * Math.PI) / stories.length;

    // Draw wheel with colored segments and centered split labels
    function drawWheel() {
      for (let i = 0; i < stories.length; i++) {
        const start = i * segmentAngle;
        // Draw segment
        ctx.beginPath();
        ctx.moveTo(center, center);
        ctx.arc(center, center, center, start, start + segmentAngle);
        ctx.fillStyle = colors[i];
        ctx.fill();

        // Draw label lines
        ctx.save();
        ctx.translate(center, center);
        ctx.rotate(start + segmentAngle / 2);
        ctx.textAlign = 'center';
        ctx.fillStyle = '#000';
        ctx.font = 'bold 16px Arial';
        const lines = stories[i].split(' ');
        const lineHeight = 18;
        for (let j = 0; j < lines.length; j++) {
          const y = (j - (lines.length - 1) / 2) * lineHeight;
          ctx.fillText(lines[j], center * 0.7, y);
        }
        ctx.restore();
      }
    }
    drawWheel();

    // Easing function for spin
    function easeOutCubic(t) { return (--t) * t * t + 1; }

    // Spin animation
    function spin() {
      document.getElementById('spinButton').disabled = true;
      const duration = 5000;
      const rotations = 8;
      const randomSpin = Math.random() * 360 + rotations * 360;
      const startTime = performance.now();

      function animate(time) {
        const elapsed = time - startTime;
        const progress = Math.min(elapsed / duration, 1);
        const angle = randomSpin * easeOutCubic(progress);
        canvas.style.transform = `rotate(${angle}deg)`;
        if (progress < 1) {
          requestAnimationFrame(animate);
        } else {
          document.getElementById('spinButton').disabled = false;
        }
      }
      requestAnimationFrame(animate);
    }

    document.getElementById('spinButton').addEventListener('click', spin);
  </script>
</body>
</html>
